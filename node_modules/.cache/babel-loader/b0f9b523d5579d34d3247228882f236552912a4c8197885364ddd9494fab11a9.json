{"ast":null,"code":"var _jsxFileName = \"D:\\\\M\\u1EADt m\\xE3 v\\xE0 an to\\xE0n th\\xF4ng tin\\\\test\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RSAEncryption = () => {\n  _s();\n  const [p, setP] = useState(''); // Khởi tạo giá trị input là chuỗi rỗng\n  const [q, setQ] = useState(''); // Khởi tạo giá trị input là chuỗi rỗng\n  const [e, setE] = useState(''); // Khởi tạo giá trị input là chuỗi rỗng\n  const [m, setM] = useState(''); // Khởi tạo giá trị input là chuỗi rỗng\n  const [cipherText, setCipherText] = useState(null);\n  const [originalMessage, setOriginalMessage] = useState(null);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const handleEncrypt = async () => {\n    setError(null); // Reset error trước mỗi lần gọi API\n    setResult(null); // Reset result trước mỗi lần gọi API\n\n    // Kiểm tra nếu các input không rỗng\n    if (!p || !q || !e || !m) {\n      setError('Please fill in all fields');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/encrypt', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          p: parseInt(p),\n          q: parseInt(q),\n          e: parseInt(e),\n          m: parseInt(m)\n        })\n      });\n      const data = await response.json();\n\n      // Xử lý phản hồi từ API\n      if (data.result !== \"Successful\") {\n        setError(data.result); // Hiển thị lỗi nếu result không phải \"Successful\"\n        setCipherText(null);\n        setOriginalMessage(null);\n      } else {\n        setCipherText(data.cipherText);\n        setOriginalMessage(data.originalMessage);\n        setResult(data.result); // Hiển thị kết quả thành công\n      }\n    } catch (err) {\n      console.error('Error:', err);\n      setError('Failed to connect to server.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"RSA Encryption\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Step 1: Set prime numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"p:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: p,\n        onChange: e => setP(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"q:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: q,\n        onChange: e => setQ(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Step 2: The number e can now be chosen freely. However, it must be coprime to \\u03D5(n) = (p-1)(q-1)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"e:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: e,\n        onChange: e => setE(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Step 3: Enter the message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"m:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: m,\n        onChange: e => setM(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleEncrypt,\n      children: \"Encrypt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 23\n    }, this), result === \"Successful\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Encrypted Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), \" \", cipherText]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Decrypted Cipher:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this), \" \", originalMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'green'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Result:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), \" \", result]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(RSAEncryption, \"pm/YjdleCJAU1oiD+iC7nYqVlx8=\");\n_c = RSAEncryption;\nexport default RSAEncryption;\nvar _c;\n$RefreshReg$(_c, \"RSAEncryption\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","RSAEncryption","_s","p","setP","q","setQ","e","setE","m","setM","cipherText","setCipherText","originalMessage","setOriginalMessage","result","setResult","error","setError","handleEncrypt","response","fetch","method","headers","body","JSON","stringify","parseInt","data","json","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","onClick","style","color","_c","$RefreshReg$"],"sources":["D:/Mật mã và an toàn thông tin/test/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst RSAEncryption: React.FC = () => {\n    const [p, setP] = useState<string>(''); // Khởi tạo giá trị input là chuỗi rỗng\n    const [q, setQ] = useState<string>(''); // Khởi tạo giá trị input là chuỗi rỗng\n    const [e, setE] = useState<string>(''); // Khởi tạo giá trị input là chuỗi rỗng\n    const [m, setM] = useState<string>(''); // Khởi tạo giá trị input là chuỗi rỗng\n    const [cipherText, setCipherText] = useState<string | null>(null);\n    const [originalMessage, setOriginalMessage] = useState<number | null>(null);\n    const [result, setResult] = useState<string | null>(null);\n    const [error, setError] = useState<string | null>(null);\n\n    const handleEncrypt = async () => {\n        setError(null); // Reset error trước mỗi lần gọi API\n        setResult(null); // Reset result trước mỗi lần gọi API\n\n        // Kiểm tra nếu các input không rỗng\n        if (!p || !q || !e || !m) {\n            setError('Please fill in all fields');\n            return;\n        }\n\n        try {\n            const response = await fetch('http://localhost:5000/encrypt', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ p: parseInt(p), q: parseInt(q), e: parseInt(e), m: parseInt(m) }),\n            });\n\n            const data = await response.json();\n\n            // Xử lý phản hồi từ API\n            if (data.result !== \"Successful\") {\n                setError(data.result); // Hiển thị lỗi nếu result không phải \"Successful\"\n                setCipherText(null);\n                setOriginalMessage(null);\n            } else {\n                setCipherText(data.cipherText);\n                setOriginalMessage(data.originalMessage);\n                setResult(data.result); // Hiển thị kết quả thành công\n            }\n        } catch (err) {\n            console.error('Error:', err);\n            setError('Failed to connect to server.');\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            <h1>RSA Encryption</h1>\n            <h2>Step 1: Set prime numbers</h2>\n            <div className=\"input-group\">\n                <label>p:</label>\n                <input type=\"number\" value={p} onChange={(e) => setP(e.target.value)}/>\n            </div>\n            <div className=\"input-group\">\n                <label>q:</label>\n                <input type=\"number\" value={q} onChange={(e) => setQ(e.target.value)}/>\n            </div>\n            <h2>Step 2: The number e can now be chosen freely. However, it must be coprime to ϕ(n) = (p-1)(q-1)</h2>\n            <div className=\"input-group\">\n                <label>e:</label>\n                <input type=\"number\" value={e} onChange={(e) => setE(e.target.value)}/>\n            </div>\n            <h2>Step 3: Enter the message</h2>\n            <div className=\"input-group\">\n                <label>m:</label>\n                <input type=\"number\" value={m} onChange={(e) => setM(e.target.value)}/>\n            </div>\n            <button onClick={handleEncrypt}>Encrypt</button>\n\n            {/* Hiển thị lỗi nếu có */}\n            {error && <p style={{color: 'red'}}>Error: {error}</p>}\n\n            {/* Hiển thị kết quả nếu thành công */}\n            {result === \"Successful\" && (\n                <div>\n                    <p>\n                        <strong>Encrypted Message:</strong> {cipherText}\n                    </p>\n                    <p>\n                        <strong>Decrypted Cipher:</strong> {originalMessage}\n                    </p>\n                    <p style={{color: 'green'}}>\n                        <strong>Result:</strong> {result}\n                    </p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default RSAEncryption;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}